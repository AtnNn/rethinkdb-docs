IssueComment
  { issueCommentUpdatedAt = 2014 (-09) (-16) 15 : 34 : 15 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 1461947
        , simpleUserLogin = N "neumino"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/1461947?v=3"
        , simpleUserUrl = "https://api.github.com/users/neumino"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/docs/issues/comments/55761835"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/docs/issues/508#issuecomment-55761835"
  , issueCommentCreatedAt = 2014 (-09) (-16) 15 : 34 : 15 UTC
  , issueCommentBody =
      "@kureikain -- I saw your library a few weeks ago, nice work! I just opened the pull request https://github.com/rethinkdb/docs/pull/509\r\n\r\n> RethinkDB query is very good. By wrapping an ORM around it, we can destroy the joy of using ReQL. I only want to do basic thing with RethinkDB, the complex query should be done use ReQL. The result of query is converted back to an entity of an array of entity when possible.\r\n\r\nThis is more or less the philosophy behind Thinky (a Node.js ORM) and I did I think something interesting there that you may be interested in.\r\n\r\nI have a method to create model, that can return a `Query` object on which I import all the methods from the driver.\r\nSo for the users, they just have to replace `r.table(\"foo\").filter({id: 3}).orderBy(\"bar\")` with `Foo.filter({id: 3}).orderBy(\"bar\")`. So while thinky provides tons of sugar/functionality, it's super easy to learn/use if you know ReQL."
  , issueCommentId = 55761835
  }