IssueComment
  { issueCommentUpdatedAt = 2016 (-03) (-31) 00 : 43 : 05 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 505365
        , simpleUserLogin = N "danielmewes"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/505365?v=3"
        , simpleUserUrl = "https://api.github.com/users/danielmewes"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/docs/issues/comments/203697947"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/docs/issues/1059#issuecomment-203697947"
  , issueCommentCreatedAt = 2016 (-03) (-31) 00 : 43 : 05 UTC
  , issueCommentBody =
      "4. Managing a secured cluster and the `--initial-password` option\r\n====\r\n\r\nIf you start a new RethinkDB server without any additional options, it will create the default \"admin\" user without any password. This makes it easy to get started in a protected environment, or when developing locally.\r\n\r\nOnce you want to start using authentication, the first step is to change the password of the \"admin\" user through the `r.db('rethinkdb').table('users')` system table.\r\n\r\n__`--initial-password`__\r\nA second option is to start a new cluster with password-protection directly. This can be achieved through the `--initial-password` command-line option. The `--initial-password` option takes one parameter, which will be used to initialize the password of the \"admin\" user. For example:\r\n```\r\nrethinkdb --initial-password secret\r\n```\r\n\r\nThe provided password only has an effect if no previous password has been set for \"admin\". Once any password is set for the \"admin\" user (either from writing to its entry in `r.db('rethinkdb').table('users')`, or from a previous start with the `--initial-password` option), the option is ignored.\r\n\r\nAdditionally, `--initial-password` also accepts a special value `auto`. When starting a new server like this:\r\n```\r\nrethinkdb --initial-password auto\r\n```\r\nthe \"admin\" user is initialized with a random password. The generated password will be printed to standard out, but not to the log file. This by itself doesn't sound particularly useful, but it simplifies adding servers to an existing cluster as we will see below.\r\n\r\n__Joining an existing cluster__\r\nWhenever a server (including a proxy) joins an existing cluster, they synchronize the current user accounts and passwords. However this process is asynchronous, and there might be a delay until a new server has received all passwords. If an attacker is able to run queries to such a server before it has received all user data, the attacker might exploit the default \"admin\" password with an empty password in order to run arbitrary queries.\r\n\r\nFor this reason, a new server without any \"admin\" password *cannot* join an existing cluster where an \"admin\" password is set. If you try to join a password-protected cluster like this:\r\n```\r\nrethinkdb --join secure.server\r\n```\r\nthe join will fail.\r\n\r\nThis is where the `--initial-password auto` option comes in handy. Any server that's supposed to join an existing password-protected cluster, should be started with the `--initial-password auto` option. Once it has connected to the remaining cluster, the random initial password will be overwritten by the \"admin\" password that has been configured in the existing cluster.\r\n```\r\nrethinkdb --initial-password auto --join secure.server\r\n```\r\n\r\nThe same applies to proxy servers as well.\r\n\r\n__Common scenarios__\r\n\r\n_Scenario 1: Setting up a cluster without password protection_\r\n    1. Start and join all nodes without a password (just like now)\r\n\r\n_Scenario 2: Setting up a new cluster in a trustworthy environment with password protection_\r\n    1. Start and join all nodes without a password\r\n    2. Configure the admin password through the `users` table\r\n\r\n_Scenario 3: Setting up a new cluster in an untrustworthy environment_\r\n    1. Reconsider if you actually want to do this. You should probably use TLS instead.\r\n    2. Configure servers with an explicit `--initial-password <pw>`\r\n    3. Start and join all nodes\r\n    4. Change the admin password through the `users` table\r\n\r\n_Scenario 4: Joining a new server into an existing password-protected cluster_\r\n    1. Start and join the new server with the `--initial-password auto` option\r\n     (if you forget to specify that option, you will see an error)\r\n\r\n__Recovering from a lost password__\r\nIf you forget the \"admin\" password, you can recover by connecting to the web UI and running the following query in the Data Explorer:\r\n```js\r\nr.db('rethinkdb').table('users').get('admin').update({password: \"new password\"})\r\n```\r\n\r\nIn general it is important to note that the web UI does *not* support user authentication as of RethinkDB 2.3. Queries in the Data Explorer are always executed with full \"admin\" permissions. Hence, special care must be taken to protect the web UI from outside access, for example by binding it only to localhost with the `--bind-http localhost` option.\r\nThis will probably change in a future version of RethinkDB.\r\nWe should have a prominent warning about this in the documentation."
  , issueCommentId = 203697947
  }