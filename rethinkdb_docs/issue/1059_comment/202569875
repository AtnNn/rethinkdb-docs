IssueComment
  { issueCommentUpdatedAt = 2016 (-03) (-28) 20 : 29 : 56 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 505365
        , simpleUserLogin = N "danielmewes"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/505365?v=3"
        , simpleUserUrl = "https://api.github.com/users/danielmewes"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/docs/issues/comments/202569875"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/docs/issues/1059#issuecomment-202569875"
  , issueCommentCreatedAt = 2016 (-03) (-28) 20 : 29 : 39 UTC
  , issueCommentBody =
      "2. System tables and `r.grant`\r\n===\r\n\r\n__`\"users\"`__\r\nA document in the `r.db('rethinkdb').table('users')` table looks like this:\r\n```js\r\n{\r\n    \"id\": \"admin\" ,\r\n    \"password\": false\r\n}\r\n```\r\n\r\nHere you can see that the \"admin\" user has an empty password. You can insert a new user with a given password like this:\r\n```js\r\nr.db('rethinkdb').table('users').insert({id: \"name\", password: \"secret\"})\r\n```\r\n\r\nThe inserted user's document will look like this:\r\n```js\r\n{\r\n    \"id\": \"name\" ,\r\n    \"password\": true\r\n}\r\n```\r\n\r\nNote that the password is not displayed in the table. Instead the fact that it's not empty is merely indicated by the value `true`.\r\n\r\nYou can use `update` to change a user's password by setting it to a new string, or you can set it to `false` to make it empty:\r\n```js\r\nr.db('rethinkdb').table('users').get(\"name\").update({password: false})\r\n```\r\n\r\nThe username itself cannot be changed. You can also delete users from the table.\r\n\r\n__`\"permissions\"`__\r\n\r\nDocuments in the `\"permissions\"` table look like this:\r\n```js\r\n {\r\n    \"id\": [\r\n        \"admin\"\r\n    ] ,\r\n    \"permissions\": {\r\n        \"config\": true ,\r\n        \"connect\": true ,\r\n        \"read\": true ,\r\n        \"write\": true\r\n    }\r\n} \r\n```\r\n\r\nThis is an example of a global-scope permission.\r\n\r\nYou can see that `\"permissions\"` contains the values for the different permission types. Each value can either be `true`, `false` or absent. When updating an entry in the `\"permissions\"` table, you can also set a permission to `null` to delete its entry (so that the value from the higher scope will be inherited again).\r\n\r\nThe `\"id\"` is what determines the user and the scope. The first element in the `\"id\"` is always the user name that this permission applies to. If the scope is a database, the `\"id\"` array will have a second element which is the UUID of the database. Such documents will also have an additional field `database` which contains the name of the database:\r\n```js\r\n {\r\n    \"database\": \"test\" ,\r\n    \"id\": [\r\n        \"name\" ,\r\n        \"8b2c3f00-f312-4524-847a-25c79e1a22d4\"\r\n    ] ,\r\n    \"permissions\": {\r\n        \"read\": true\r\n    }\r\n} \r\n```\r\n\r\nFinally for permissions on the table scope, the id will be `[username, db_id, table_id]`, and you get both a `database` as well as a `table` field:\r\n```js\r\n {\r\n    \"database\": \"test\" ,\r\n    \"id\": [\r\n        \"name\" ,\r\n        \"8b2c3f00-f312-4524-847a-25c79e1a22d4\" ,\r\n        \"9d705e8c-4e49-4648-b4a9-4ad82ebba635\"\r\n    ] ,\r\n    \"permissions\": {\r\n        \"read\": true\r\n    } ,\r\n    \"table\": \"t1\"\r\n} \r\n```\r\n\r\nWhen inserting into `\"permissions\"`, you only need to specify the primary key (`id`) and the `permissions` object. The `\"database\"` and `\"table\"` fields will be filled in automatically if applicable. \r\n\r\n__`grant`__\r\n\r\nThe `grant` command provides a second, often more convenient, way for granting or removing permissions. You can call it globally `r.grant`, on a database `r.db('test').grant` or on a table `r.db('test').table('t1').grant`.\r\n\r\nIn either case, the first argument to `grant` is the username that you want to grant/remove permissions for, and the second argument is an object similar to the `\"permissions\"` object in the `\"permissions\"` table. For example:\r\n```js\r\n// Allow user \"name\" to read all tables, across all databases:\r\nr.grant(\"name\", {read: true})\r\n\r\n// Allow user \"name\" to write to tables in the \"test\" database:\r\nr.db(\"test\").grant(\"name\", {write: true})\r\n\r\n// Allow user \"name\" to configure the table \"t1\" in the database \"test\":\r\nr.db(\"test\").table(\"t1\").grant(\"name\", {config: true})\r\n\r\n// Disallow \"name\" from writing to table \"t2\" in the database \"test\" (it can still write to other tables in that database):\r\nr.db(\"test\").table(\"t2\").grant(\"name\", {write: false})\r\n\r\n// Delete the \"config\" permission for table \"t1\" again (it will inherit the value from the higher scope again):\r\nr.db(\"test\").table(\"t1\").grant(\"name\", {config: null})\r\n```\r\n\r\nThe return value of `grant` looks like this:\r\n```js\r\n{\r\n    \"granted\": 1 ,\r\n    \"permissions_changes\": [\r\n        {\r\n            \"new_val\": {\r\n                \"read\": true\r\n            } ,\r\n            \"old_val\": null\r\n        }\r\n    ]\r\n}\r\n```"
  , issueCommentId = 202569875
  }