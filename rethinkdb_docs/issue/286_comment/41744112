IssueComment
  { issueCommentUpdatedAt = 2014 (-04) (-29) 23 : 18 : 48 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 48436
        , simpleUserLogin = N "coffeemug"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/48436?v=3"
        , simpleUserUrl = "https://api.github.com/users/coffeemug"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/docs/issues/comments/41744112"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/docs/pull/286#issuecomment-41744112"
  , issueCommentCreatedAt = 2014 (-04) (-29) 23 : 18 : 48 UTC
  , issueCommentBody =
      "> Sorting without an index should never be done on a table, even if it is a small one.\r\n\r\nIt's really, really nice in interactive mode because you get to play with small datasets ad-hoc. Also some tables (e.g. US states) never grow past 100k elements. So I disagree with the fundamental assumption here, though I see what you're getting at.\r\n\r\n> Any object if I revert this example?\r\n\r\nWhat if we did it this way:\r\n\r\n__Example:__ If you have a sequence with less than 100,000 documents, you can order it without an index.\r\n\r\n```js\r\nr.table('posts').get(1)(posts).orderBy('date')\r\n```\r\n\r\nYou can also select a descending ordering:\r\n\r\n```js\r\nr.table('posts').get(1)(posts).orderBy(r.desc('date'))\r\n```\r\n\r\nIf you're doing ad-hoc analysis and know your table won't have more then 100,000 elements you can run `orderBy` without an index:\r\n\r\n```js\r\nr.table('small_table').orderBy('date')\r\n```\r\n"
  , issueCommentId = 41744112
  }