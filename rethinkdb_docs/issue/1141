Issue
  { issueClosedAt = Just 2016 (-06) (-22) 23 : 52 : 09 UTC
  , issueUpdatedAt = 2016 (-06) (-22) 23 : 52 : 09 UTC
  , issueEventsUrl =
      "https://api.github.com/repos/rethinkdb/docs/issues/1141/events"
  , issueHtmlUrl =
      Just "https://github.com/rethinkdb/docs/issues/1141"
  , issueClosedBy = Nothing
  , issueLabels = []
  , issueNumber = 1141
  , issueAssignee =
      Just
        SimpleUser
          { simpleUserId = Id 467928
          , simpleUserLogin = N "chipotle"
          , simpleUserAvatarUrl =
              "https://avatars.githubusercontent.com/u/467928?v=3"
          , simpleUserUrl = "https://api.github.com/users/chipotle"
          , simpleUserType = OwnerUser
          }
  , issueUser =
      SimpleUser
        { simpleUserId = Id 67937
        , simpleUserLogin = N "encryptio"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/67937?v=3"
        , simpleUserUrl = "https://api.github.com/users/encryptio"
        , simpleUserType = OwnerUser
        }
  , issueTitle =
      "Explicitly define type hierarchy in Data Types document"
  , issuePullRequest = Nothing
  , issueUrl =
      "https://api.github.com/repos/rethinkdb/docs/issues/1141"
  , issueCreatedAt = 2016 (-06) (-15) 22 : 29 : 51 UTC
  , issueBody =
      Just
        "We have a type hierarchy in RethinkDB, but it's not documented. Notably, the \"DATUM\" type which occurs all over our error messages is not explicitly defined anywhere except [in a subsection of the Writing Drivers page](https://rethinkdb.com/docs/writing-drivers/#reql-data), which isn't where most people will look to get a better understanding of ReQL.\r\n\r\nNote that it's not a strict hierarchy; `DATUM` and `SEQUENCE` are disparate types, but an `ARRAY` is both.\r\n\r\nI might be getting some details wrong (ping @danielmewes and @mlucy for a factual check), but I'm thinking something close to this would be helpful to add to [the data types page](https://rethinkdb.com/docs/data-types/):\r\n\r\n---\r\n\r\nNote that the examples listed below might not describe all the ways you could get a value of that type.\r\n\r\n* `DB`: E.g. the type of `r.db()`.\r\n* `SEQUENCE`: Some sequence of `DATUM`s, possibly infinite, e.g. `r.range()`.\r\n    * `SELECTION`: A set of documents in a table, e.g. the type of `r.table().getAll()`. You can call `r.update()` on these.\r\n        * `TABLE_SLICE`: A contiguous set of documents in a table, e.g. the type of `r.table().between()`.\r\n            * `TABLE`: E.g. the type of `r.table()`.\r\n* `GROUPED_DATA`: E.g. the type of `r.table().group()`.\r\n* `DATUM`: (TODO: what's a good definition here?)\r\n    * `SINGLE_SELECTION`: A single document in a table (or null), e.g. the type of `r.table().get()`. (TODO: should this be below `OBJECT` and `NULL`?)\r\n    * `NULL`: only `null`.\r\n    * `BOOL`: only `true` and `false`.\r\n    * `NUMBER`: Floating point numbers, not including positive or negative infinity or any NaNs.\r\n    * `STRING`: e.g. `\"foo\"`\r\n    * `ARRAY`: An array of other `DATUM`s, e.g. `[1, null, {\"a\": \"b\"}]` (also a `SEQUENCE`; TODO: should we put this type there too?)\r\n    * `OBJECT`: A mapping of `STRING` keys to `DATUM` values, e.g. `{\"a\": 4, \"b\": false}`\r\n    * `PTYPE`: Psuedo-types (TODO: definition here?)\r\n        * `BINARY`: e.g. `r.binary(\"data\")`\r\n        * `GEOMETRY`: e.g. `r.point(37.7749,-122.4194)`\r\n        * `TIME`: e.g. `r.time(2013, r.august, 9, 18, 53, 15.012, '-07:00')`\r\n    * `MINVAL` / `MAXVAL`: only `r.minval()` and `r.maxval()` respectively.\r\n* `FUNCTION`: TODO\r\n\r\nTODO: Does `STREAM` need to be here? It kinda screws with the whole nearly-hierarchy of the `SEQUENCE` part"
  , issueState = "closed"
  , issueId = Id 160538774
  , issueComments = 7
  , issueMilestone = Nothing
  }