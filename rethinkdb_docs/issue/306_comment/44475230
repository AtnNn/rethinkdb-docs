IssueComment
  { issueCommentUpdatedAt = 2014 (-05) (-28) 22 : 55 : 34 UTC
  , issueCommentUser =
      SimpleUser
        { simpleUserId = Id 552910
        , simpleUserLogin = N "Tryneus"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/552910?v=3"
        , simpleUserUrl = "https://api.github.com/users/Tryneus"
        , simpleUserType = OwnerUser
        }
  , issueCommentUrl =
      "https://api.github.com/repos/rethinkdb/docs/issues/comments/44475230"
  , issueCommentHtmlUrl =
      "https://github.com/rethinkdb/docs/issues/306#issuecomment-44475230"
  , issueCommentCreatedAt = 2014 (-05) (-28) 22 : 55 : 34 UTC
  , issueCommentBody =
      "The latest full write-up of the API is [here](https://github.com/rethinkdb/rethinkdb/issues/1383#issuecomment-39525676), although it has changed a bit since, so here's an up-to-date version, hope I didn't miss anything:\r\n\r\n## Syntax\r\n`r.http(<STRING>)`\r\nWhere the parameter is the url to access.\r\n\r\nResult: `<STRING>` or `<DATUM>` depending on the content type and `result_format` optarg.  May be a `<STREAM>` in the future (see rethinkdb/rethinkdb#2448).\r\n\r\n## Optargs\r\n - `data=<DATUM>`: the data to send to the server on a POST, PUT, PATCH, or DELETE request (see below); default=None\r\n - `timeout=<NUMBER>`: seconds before aborting the operation (similar to `r.js`); default=30\r\n - `method=( GET | POST | PUT | PATCH | DELETE | HEAD )`: HTTP method to use; default=\"GET\"\r\n - `params=<OBJECT>`: URL parameters to append to the URL as url-encoded key/value pairs; default=None\r\n - `header=<DATUM>`: header lines to include, may be an array of strings or an object; default=None\r\n - `reattempts=<NUMBER>`: number of attempts to perform while temporary or connection errors occur; default=5\r\n - `allow_redirect=<BOOL>`: follow redirects/location; default=False\r\n - `verify=<BOOL>`: verify the server's SSL certificate ; default=True\r\n - `depaginate=<OBJECT>`: follow `next` links and aggregate (see below); default=None\r\n - `auth=<OBJECT>`: authentication information (see below); default=None\r\n - `result_format=( text | json | jsonp | auto )`: choose how to format the result (see below); default=\"auto\"\r\n\r\n## Details\r\n\r\n`data=<DATUM>`\r\nThis optargs specifies the body data to send in the request.  When performing a PUT, PATCH, or DELETE request, this value is serialized to JSON and placed in the body (and the Content-Type will be set to `application/json`.  When performing a POST request, two things may happen\r\n * If `data` is a `<STRING>`, the string will be put directly into the body\r\n * If `data` is an `<OBJECT>`, the object will be written to the body as form-encoded key/value pairs. (values must be numbers, strings, or NULL).\r\n * If `data` is not a `<STRING>` or `<OBJECT>`, an error will be thrown.\r\n\r\n`depaginate=<OBJECT>`\r\nThis optarg specifies the strategy for depagination.  When not set, no depagination will occur.  While not implemented yet, the plan is that the object will contain two items, the first being the strategy to perform depagination, and the second being a counter to limit the number of links followed.  The strategy could be a string or a function.  As a string it will specify a built-in strategy, and as a function it will define its own strategy.  See rethinkdb/rethinkdb#2447 to track this feature.\r\n\r\n`auth=<OBJECT>`\r\nThe given object shall contain information regarding the authentication to use with the server, such as basic HTTP or OAuth.  Example:\r\n`{ type: \"basic\", user: \"grey\", pass: \"hunter2\" }`\r\nTypes supported at the moment are `basic` and `digest`.  If the type is omitted, `basic` is assumed.\r\n\r\n`result_format=( text | json | jsonp | auto )`\r\n`text` will return the result as a string, always\r\n`json` will attempt to parse the result as json, and will error if a parse cannot be completed\r\n`jsonp` will attempt to parse the result as padded json, according to the specification given at www.json-p.org\r\n`auto` will disambiguate based on the content-type of the result.\r\n * `application/json` will parse the result as JSON\r\n * `application/json-p`, `text/javascript`, and `text/json-p` will parse the result as JSONP, or JSON if that fails, or plaintext if that fails\r\n * any other content type is returned as plaintext \r\n\r\n## Server Configuration\r\n\r\nAs mentioned in the previous proposal, we will need a proxy command-line option for configuring a given machine to use an HTTP proxy: `--reql-http-proxy <STRING>`.  This may also be specified through the config file.  This string should be of the format `[protocol://]host[:port]`, where protocol is one of `http`, `socks4`, `socks4a`, `socks5`, or `socks5h`.\r\n\r\n"
  , issueCommentId = 44475230
  }