Issue
  { issueClosedAt = Just 2015 (-05) (-18) 17 : 02 : 32 UTC
  , issueUpdatedAt = 2015 (-05) (-18) 17 : 02 : 32 UTC
  , issueEventsUrl =
      "https://api.github.com/repos/rethinkdb/docs/issues/757/events"
  , issueHtmlUrl =
      Just "https://github.com/rethinkdb/docs/issues/757"
  , issueClosedBy = Nothing
  , issueLabels = []
  , issueNumber = 757
  , issueAssignee =
      Just
        SimpleUser
          { simpleUserId = Id 467928
          , simpleUserLogin = N "chipotle"
          , simpleUserAvatarUrl =
              "https://avatars.githubusercontent.com/u/467928?v=3"
          , simpleUserUrl = "https://api.github.com/users/chipotle"
          , simpleUserType = OwnerUser
          }
  , issueUser =
      SimpleUser
        { simpleUserId = Id 53049
        , simpleUserLogin = N "rocketraman"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/53049?v=3"
        , simpleUserUrl = "https://api.github.com/users/rocketraman"
        , simpleUserType = OwnerUser
        }
  , issueTitle =
      "SQL->reql cheatsheet: add example of group by having count"
  , issuePullRequest = Nothing
  , issueUrl =
      "https://api.github.com/repos/rethinkdb/docs/issues/757"
  , issueCreatedAt = 2015 (-05) (-10) 18 : 26 : 41 UTC
  , issueBody =
      Just
        "An example of an SQL with a `group by` `having` `count(*) > x` would be useful. For example, in the movies database, if one wanted to find the duplicate movies (not distinct).\r\n\r\n```\r\nSELECT title,\r\n       COUNT(title)\r\n    FROM movies\r\n    GROUP BY title\r\n    HAVING COUNT(title) > 1\r\n```\r\n\r\n```\r\nr.table('movies').withFields('title').group(r.row).count().ungroup()\r\n .filter(r.row('reduction').gt(1))\r\n```\r\n"
  , issueState = "closed"
  , issueId = Id 74973151
  , issueComments = 2
  , issueMilestone = Nothing
  }