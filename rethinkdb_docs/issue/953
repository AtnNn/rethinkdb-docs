Issue
  { issueClosedAt = Just 2015 (-11) (-23) 17 : 53 : 35 UTC
  , issueUpdatedAt = 2015 (-11) (-23) 17 : 53 : 35 UTC
  , issueEventsUrl =
      "https://api.github.com/repos/rethinkdb/docs/issues/953/events"
  , issueHtmlUrl =
      Just "https://github.com/rethinkdb/docs/issues/953"
  , issueClosedBy = Nothing
  , issueLabels = []
  , issueNumber = 953
  , issueAssignee =
      Just
        SimpleUser
          { simpleUserId = Id 467928
          , simpleUserLogin = N "chipotle"
          , simpleUserAvatarUrl =
              "https://avatars.githubusercontent.com/u/467928?v=3"
          , simpleUserUrl = "https://api.github.com/users/chipotle"
          , simpleUserType = OwnerUser
          }
  , issueUser =
      SimpleUser
        { simpleUserId = Id 167416
        , simpleUserLogin = N "VeXocide"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/167416?v=3"
        , simpleUserUrl = "https://api.github.com/users/VeXocide"
        , simpleUserType = OwnerUser
        }
  , issueTitle = "Document `r.uuid` versions and namespace"
  , issuePullRequest = Nothing
  , issueUrl =
      "https://api.github.com/repos/rethinkdb/docs/issues/953"
  , issueCreatedAt = 2015 (-11) (-14) 22 : 07 : 27 UTC
  , issueBody =
      Just
        "We should be a little more explicit about our `r.uuid` implementation since its functionality has been extended with the latest release, and we do follow standards.\r\n\r\n`r.uuid()` generates a version 4 UUID which is also known as a random UUID, see https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_.28random.29.\r\n\r\n`r.uuid(\"foo\")` generates a version 5 UUID which generally takes a namespace and uses SHA-1 hashing, see https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_5_.28SHA-1_hash_.26_namespace.29. We use a fixed namespace UUID `91461c99-f89d-49d2-af96-d8e2e14e9b58`.\r\n\r\nHere it might be interesting to note that you can generate the same version 5 UUIDs in Python once you know the namespace UUID, it's done as follows.\r\n\r\n```python\r\n>>> import uuid\r\n>>> uuid.uuid5(uuid.UUID(\"91461c99-f89d-49d2-af96-d8e2e14e9b58\"), \"foo\")\r\nUUID('aa32a020-8c2d-5ff1-823b-ad3fa5d067eb')\r\n```\r\n\r\nThis is equal to `r.uuid(\"foo\")` in ReQL which returns the string `\"aa32a020-8c2d-5ff1-823b-ad3fa5d067eb\"`."
  , issueState = "closed"
  , issueId = Id 116955137
  , issueComments = 0
  , issueMilestone = Nothing
  }