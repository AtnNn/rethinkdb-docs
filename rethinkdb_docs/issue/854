Issue
  { issueClosedAt = Just 2015 (-08) (-18) 21 : 00 : 49 UTC
  , issueUpdatedAt = 2015 (-08) (-18) 21 : 00 : 49 UTC
  , issueEventsUrl =
      "https://api.github.com/repos/rethinkdb/docs/issues/854/events"
  , issueHtmlUrl =
      Just "https://github.com/rethinkdb/docs/issues/854"
  , issueClosedBy = Nothing
  , issueLabels = []
  , issueNumber = 854
  , issueAssignee =
      Just
        SimpleUser
          { simpleUserId = Id 467928
          , simpleUserLogin = N "chipotle"
          , simpleUserAvatarUrl =
              "https://avatars.githubusercontent.com/u/467928?v=3"
          , simpleUserUrl = "https://api.github.com/users/chipotle"
          , simpleUserType = OwnerUser
          }
  , issueUser =
      SimpleUser
        { simpleUserId = Id 1366
        , simpleUserLogin = N "deontologician"
        , simpleUserAvatarUrl =
            "https://avatars.githubusercontent.com/u/1366?v=3"
        , simpleUserUrl = "https://api.github.com/users/deontologician"
        , simpleUserType = OwnerUser
        }
  , issueTitle =
      "Huge variety in specifying functions in method signatures"
  , issuePullRequest = Nothing
  , issueUrl =
      "https://api.github.com/repos/rethinkdb/docs/issues/854"
  , issueCreatedAt = 2015 (-08) (-12) 22 : 44 : 48 UTC
  , issueBody =
      Just
        "Here's the results of my survey of the docs. This is how the docs specify that a term accepts a function in the signature spec at the top:\r\n\r\nTerm | says it accepts a function with\r\n----------------|------------------------------------------------\r\n`eq_join`, `do` | `function`\r\n`filter`, `inner_join`, `outer_join`, `offsets_of` | `predicate`\r\n`map`, `concatMap` | `mapping_function`\r\n`update`, `replace` | `object | expr`\r\n`merge` | `object | function`\r\n`contains` | `value | predicate`\r\n`count` | `value_or_predicate`\r\n`reduce` | `reduction_function`\r\n`for_each` | `write_query`\r\n`group`, `min`, `max`, `sum` | `field_or_function`\r\n`order_by` | no mention it accepts a function in the spec, only in examples\r\n`http` | no mention in spec, `page` optarg accepts function\r\n\r\nI suggest we use the following specs:\r\n\r\nTerm | calls it:\r\n----------------|------------------------------------------------\r\n`update`, `replace`, `merge`, `group`, `min`, `max`, `sum`, `order_by`, `concatMap` | `function/1`\r\n`for_each` | `write_function/1`\r\n`filter`, `eq_join`, `inner_join`, `outer_join`, `offsets_of`, `contains`, `count` | `predicate_function/1`\r\n`do`, `map` | `function/1+`\r\n`reduce` | `function/2`\r\n`http` | should specify `function/1` in the `page` optarg description\r\n\r\nI'm going with erlang-style arity declarations since that seems about right for a dynamic language. It would become too verbose I think doing full type declarations for the functions (`predicate_function` and `write_function` are a nod in this direction without getting too far into the weeds). \r\n\r\n@mlucy @danielmewes thoughts?"
  , issueState = "closed"
  , issueId = Id 100651362
  , issueComments = 2
  , issueMilestone = Nothing
  }